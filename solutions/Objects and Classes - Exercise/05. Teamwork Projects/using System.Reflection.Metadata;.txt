using System.Reflection.Metadata;

namespace _05._Teamwork_Projects
{
    internal class Program
    {
        static void Main(string[] args)
        {
            List<Team> teams = new List<Team>();

            InitializeTeams(teams);

            JoinTeams(teams);

            PrintValidTeams(teams);

            PrintTeamsToDisband(teams);

        }

        static void PrintTeamsToDisband(List<Team> teams )
        {
            List<Team> teamsToDisband = teams
               .Where(t => t.Members.Count == 0)
               .OrderBy(t => t.TeamName)
               .ToList();
            Console.WriteLine("Teams to disband:");
            foreach (Team disbandTeam in teamsToDisband)
            {
                Console.WriteLine($"{disbandTeam.TeamName}");
            }

        }
        static void PrintValidTeams(List<Team> teams) 
        {
            List<Team> teamsWithMembers = teams
                .Where(t => t.Members.Count > 0)
                .OrderByDescending(t => t.Members.Count)
                .ThenBy(t => t.TeamName)
                .ToList();

            foreach (Team team in teamsWithMembers)
            {
                Console.WriteLine($"{team.TeamName}");
                Console.WriteLine($"- {team.Creator}");
                foreach (string member in team.Members.OrderBy(m=>m))
                {
                    Console.WriteLine($"-- {member}");
                }
            }
        }
        static void JoinTeams(List<Team> teams)
        {
            string comand;
            while ((comand = Console.ReadLine()) != "end of assignment")
            {
                string[] comandArg = comand.Split("->", StringSplitOptions.RemoveEmptyEntries);
                string user = comandArg[0];
                string teamName = comandArg[1];

                if (!TeamAlredyExist(teams, teamName))
                {
                    Console.WriteLine($"Team {teamName} does not exist!");
                }
                else if (OlreadyAMemberOfATeam(teams, user))
                {
                    Console.WriteLine($"Member {user} cannot join team {teamName}!");
                }
                else
                {
                    Team teamToJoin = teams
                         .First(t => t.TeamName == teamName);
                    teamToJoin.AddMember(user);

                }
            }
        }
        static void InitializeTeams(List<Team> teams)
        {
            int n = int.Parse(Console.ReadLine());

            for (int i = 0; i < n; i++)
            {
                string[] inputInfo = Console.ReadLine().Split("-",StringSplitOptions.RemoveEmptyEntries);
                string creator = inputInfo[0];
                string teamName = inputInfo[1];
                   
                if (TeamAlredyExist(teams, teamName))
                {
                    Console.WriteLine($"Team {teamName} was already created!");
                }
                else if (TeamAlredyCreated(teams, creator))
                {
                    Console.WriteLine($"{creator} cannot create another team!");
                }
                else
                {
                    Team newTeam = new Team(teamName, creator);
                    teams.Add(newTeam);
                    Console.WriteLine($"Team {teamName} has been created by {creator}!");

                }
            }
        }
        static bool OlreadyAMemberOfATeam(List<Team> teams, string user)
        {
            return teams.Any(t=> t.Members.Contains(user)) || 
                teams.Any(t=> t.Creator == user);  
        }
        static bool TeamAlredyExist(List<Team> teams, string teamName)
        {

            return teams.Any(t => t.TeamName == teamName);
        }
        static bool TeamAlredyCreated(List<Team> teams, string creator)
        {
            return teams.Any(t => t.Creator == creator);

        }


    }
    public class Team
    {
        private readonly List<string> members;
         
        public Team(string teamName , string creator)
        {
            TeamName = teamName;
            Creator = creator;
            
            members = new List<string>();   
            
        }

        public string TeamName { get; set; }
        public string Creator { get; set; }
       
       public List <string> Members 
            => members; 
        public void AddMember (string memberName) 
        { 
         members.Add(memberName); 
        }

    }
}    